JavaScript是一种基于原型继承的语言，这跟许多其他面向对象的语言有非常大的区别。因此，这给对于JavaScript继承的学习造成了比较大的困扰，特别是其中又牵涉
各种各样的独有的名词，如果不彻底搞清楚，彻底理解这些相关的概念，是无法真正掌握JavaScript的继承实现的。本文试着从自己学习过程中提炼出一些自己的理解，用最
简单易懂的方式进行一些总结，以便反复查阅理解和记忆。

1.prototype(原型)
prototype是JavaScript中所有的函数都具有的一个属性,函数的prototype属性值是一个普通对象,这个对象上存放了这个函数能够被继承的所有属性和方法。
请看:
let Fn = function () {
  this.age = 30;
};
Fn.prototype.name = 'this is fn';
Fn.prototype.sayName = function () {
  console.log(this.name);
}
//实例化一个对象
let fn = new Fn();
fn.name;      //this is fn
fn.sayName(); //this is fn
fn.age;       //30(因为构造函数中的this是指向生成的实例的,所以这个age属性也会赋给实例)
这个简单的例子可以说明,定义在函数prototype属性上的属性和方法，可以被这个构造函数的实例所继承共享,这就是JavaScript中继承的基本原理。











