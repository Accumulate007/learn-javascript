JavaScript是一种基于原型继承的语言，这跟许多其他面向对象的语言有非常大的区别。因此，这给对于JavaScript继承的学习造成了比较大的困扰，特别是其中又牵涉
各种各样的独有的名词，如果不彻底搞清楚，彻底理解这些相关的概念，是无法真正掌握JavaScript的继承实现的。本文试着从自己学习过程中提炼出一些自己的理解，用最
简单易懂的方式进行一些总结，以便反复查阅理解和记忆。

1.prototype(原型,也可以叫原型对象)
prototype是JavaScript中所有的函数都具有的一个属性,函数的prototype属性值是一个普通对象,这个对象上存放了这个函数能够被继承的所有属性和方法。
请看:
let Fn = function () {
  this.age = 30;
};
Fn.prototype.name = 'this is fn';
Fn.prototype.sayName = function () {
  console.log(this.name);
}
//实例化一个对象
let fn = new Fn();
fn.name;      //this is fn
fn.sayName(); //this is fn
fn.age;       //30(因为构造函数中的this是指向生成的实例的,所以这个age属性也会赋给实例)
这个简单的例子可以说明,定义在函数prototype属性上的属性和方法，可以被这个构造函数的实例所继承共享,这就是JavaScript中继承的基本原理。
那么,JavaScript中其他类型的对象有prototype属性吗?答案是没有,只有函数类型的对象有这个属性。
let arr = [1,2,3];
let obj = {name: 'aaa'};

arr.prototype;  //undefined
obj.prototype;  //undefined

所有内置构造函数都有自己的原型对象(包括Array,String,Boolean,Function,RegExp,Date,Object),因此
数组类型的实例方法,是从Array.prototype上继承的
函数类型的实例方法,是从Function.prototype上继承的
字符串类型的实例方法,是从String.prototype上继承的
...


2.__proto__(隐式原型)
关于__proto__需要记住一句话: 所有的引用类型数据(数组,对象,函数)都有一个__proto__属性。
__proto__是一个非标准的属性,它只是浏览器的一个实现,因此一般是不推荐使用这个属性的。但是理解这个属性,对于理解JavaScript中的原型链,以及继承非常有帮助。
既然所有的引用类型的数据都有一个__proto__属性,那么，这个属性是什么，干嘛用的呢？
简单点说，对象的__proto__属性回答了一个问题： 我这个对象从哪里继承属性和方法？
因此，对象的__proto__属性都是指向它的构造函数的prototype属性值的。因为构造函数的属性和方法需要定义在prototype属性上才能被继承，这也是JavaScript的
特点。
用几个例子说明。
let arr = [1,2,3];
let fn = function () {};
let obj = {a: 'aaa'};

arr.__proto__ === Array.prototype;    //true
fn.__proto__ === Function.prototype;  //true
obj.__proto__ === Object.prototype;   //true

所有的对象，都是从最顶层的Object.prototype上继承属性方法的，请看
Array.prototype.__proto__ === Object.prototype;       //true
Function.prototype.__proto__ === Object.prototype;    //true
String.prototype.__proto__ === Object.prototype;      //true
RegExp.prototype.__proto__ === Object.prototype;      //true
Date.prototype.__proto__ === Object.prototype;        //true
Boolean.prototype.__proto__ === Object.prototype;     //true
Number.prototype.__proto__ === Object.prototype;      //true
Object.prototype === null;    //这里就到顶了

综上，我们可以理解一个概念：原型链。对象的继承顺序一般都是： 实例对象自身 -> 内置构造函数的prototype -> Object.prototype。
这就是所谓的原型链。而对象的__proto__属性，就是你查找原型链的依据。
当试图去得到一个对象的某个属性时，如果对象本身没有这个属性，那么会去它的__proto__中一级一级查找。
通过一个例子再理解一下。
Object.prototype.forObj = '这是Object.prototype特意准备的属性';
Array.prototype.forArr = '这是Array.prototype特意准备的属性';
let arr = [1,2,3];

arr.forObj;   //这是Object.prototype特意准备的属性
arr.forArr;   //这是Array.prototype特意准备的属性
arr对象本身是没有forObj和forArr这两个属性的，但是它可以通过自身的__proto__往原型链上一级一级查找，如果原型链上有这个属性，它就继承这个属性。
















