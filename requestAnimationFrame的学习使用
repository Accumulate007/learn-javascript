一.为什么要使用requestAnimationFrame()
  我们通常使用的是setTimeout()以及setInterval()来编写JavaScript动画，这两个定时器方法都可以显式地指定动画延迟调用的时间。但是在编写动画过程中，一个
关键点是要知道延迟多少时间合适。一方面，循环时间必须足够短，使得动画效果平滑顺畅；另一方面，动画时间间隔必须足够长，确保浏览器足够时间渲染动画的变化。
  按照通常的经验，显示器一般刷新频率为60Hz,也就是说显示器每秒钟重绘制60次。而浏览器根据显示器的这个特性，约束了自己的重绘操作，使得浏览器自己的重绘频率
不超过显示器的重绘频率。因此，平滑动画的最佳循环间隔时间为 1000ms/60 = 16.7ms。这就是我们在编写JavaScript动画时，往往定时器的循环时间是控制在20ms左右
以便让浏览器有足够的时间去重新绘制动画,而20毫秒的间隔也会让动画显得更加平滑流畅。
  但是，众所周知，setTimeout()和setInterval()的时间控制是不精准的，况且是在20ms左右的这个级别上。setTimeout()和setInterval()的内在运行机制决定了它们
可设置的时间间隔参数只是指定了把动画代码添加到浏览器UI线程队列中等待执行的时间，如果队列前面已经存在其他的任务，那么动画代码必须要等到前面的任务执行完毕
之后方可执行。requestAnimationFrame()的出现，就解决了这个问题。
  requestAnimationFrame()是不可设置动画代码间隔时间的，因为它会自动采用系统时间间隔，保证最佳的绘制效率。让各种网页动画效果能有一个统一的刷新机制，从而
节省系统资源，提高系统性能，保证动画效果。

二.requestAnimationFrame()的使用
  requestAnimationFrame()方法的完整写法为:
  let requestID = requestAnimationFrame(callback);
其中 callback 为传入该方法的回调函数,该回调函数中包含了执行动画的代码；
requestID 为一个非0的整数，指代当前的这个动画，可以把这个参数传入 cancelAnimationFrame(requestID),用来取消这个动画的执行。

三.几个例子
1.理解动画的返回值requestID
let requestID = requestAnimationFrame(function () {
	console.log('000');
});

let requestID2 = requestAnimationFrame(function () {
	console.log('111');
});

console.log(requestID,requestID2);  // 1 2
