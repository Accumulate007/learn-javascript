在学习JavaScript的过程中，会遇到一些专题性的内容，比如继承，函数等等，这些内容足以写一篇，甚至是一系列的文章。当然，也会遇到一些相对细小的模块，这些知识
点没有那么庞大，也无需专门的一篇文章来讲解，所以就想到把这些平时工作学习中遇到的琐碎的知识点集合到一篇文章中，供日后查阅。

1.void运算符
void运算符的一般语法为： void expression。
expression是一个表达式,void运算符对表达式进行求值，然而特别的是,无论表达式的求值结果是什么,void运算符都返回 undefined。
因此，void 运算符通常只用于获取 undefined 的原始值，一般使用 void(0)（等同于 void 0）。也就是说 void 0 === undefined;   //true
但是,void还有一个特殊的用途,就是让JavaScript引擎把一个函数识别成函数表达式而不是函数声明（语句）。
void function iife() {
  console.log('this is a iife function');
}();
// this is a iife function

再说说我们最常见的javascript:void(0);
当用户点击一个以 javascript: URI 时，浏览器会对冒号后面的代码进行求值，然后把求值的结果显示在页面上，这时页面基本上是一大片空白，这通常不是我们想要的。
只有当这段代码的求值结果是undefined的时候,浏览器才会停止这个默认行为。而void(0)的结果就是undefined,所以这就是我们经常在a链接中使用javascript:void(0)
的原因。


2.cookie的设置
设置的cookie的语法是: document.cookie = '.....';

设置单个key-value的cookie时候:
document.cookie = 'name=' + 'jack';
document.cookie;                      // 'name=jack'

设置多个cookie值的方式:
document.cookie = 'name=' + 'jack';
document.cookie = 'age=' + 50;

docuemnt.cookie;                    //'name=jack,age=50'

如果出现了同名的cookie值,后面的会覆盖前面的值:
document.cookie = 'name=' + 'jack';
document.cookie = 'name=messi';

document.cookie;                  //'name=messi'

本地的cookie会默认在发送HTTP请求的时候,在请求头里被发送到服务端。
在退出浏览器之后，cookie会被清空。


3.onload事件和DOMContentReady的区别
onload: 页面完全加载完成后触发，包括页面里的视频、音频、图片等等都加载完毕。
DOMContentReady: 当初始HTML文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架完成加载。


4.在浏览器地址栏中从输入URL到页面加载显示完成的,这个过程中发生的事情
a.浏览器查找域名的IP地址
b.DNS的具体寻址包括:浏览器缓存,系统缓存,路由器缓存...
c.浏览器向寻址成功的服务器发送一个HTTP请求
d.服务器的永久重定向响应(从http://baidu.com -> http://www.baidu.com)
e.浏览器跟踪重定向地址
f.服务器处理请求
g.服务器返回一个HTTP响应
h.浏览器加载、解析、显示HTML
i.浏览器发送请求获取嵌入在HTML中的资源,包括:图片、音频、视频、CSS、JS等等
j.浏览器发送异步请求


5.上传图片文件预览的原生小方法
HTML代码如下:
<input type="file" name="file" onchange="showPreview(this)">
<img src="" width="816" height="373" id="img1">

javascript代码如下:
function showPreview(source) {
	let file = source.files[0];

	if(window.FileReader) {
		let fr = new FileReader();
		fr.onloadend = function (ev) {
			document.getElementById('img1').src = ev.target.result;
			console.log(ev.target.result);	//这是一个base64格式的图片文件
		}
		fr.readAsDataURL(file);
	}
}

FileReader对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容,使用 File 或 Blob 对象指定要读取的文件或数据。


6.URI、URL、URN的概念
URI: 统一资源标识符,URI包括URL和URN,URL和URN也有交集,但URI不止URL和URN。
URL: URL是URI的一种,不仅标识了web资源,还指定了操作或者获取方式,同时指出了主要访问机制和网络位置。
URN: URN是URI的一种,用特定命名空间的名字标识资源,使用URN可以在不知道其网络位置及访问方式的情况下讨论资源。

举例
URI: http://bitpoetry.io/posts/index.html#intro
URL: http://bitpoetry.io/posts/index.html
URN: bitpoetry.io/posts/index.html#intro


7.document.documentElement到底是什么?
document.documentElement其实就是一个文档的<html></html>标签,也就是这个文档的根节点。
在同一个文档中: document.children[0] === document.documentElement;	//true
<html></html>也是document唯一的元素节点,即：
document.children[0];	//<html></html>
document.children[1];	//undefined


8.















