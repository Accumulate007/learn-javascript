“前端安全问题”指的是发生在浏览器、前端应用中，或者通常由前端工程师来对其进行修复的安全问题。本文总结其中8大比较典型的前端安全问题。

一、XSS(Cross-Site Scripting,跨站脚本攻击)
XSS是跨站脚本攻击的简称，它发生的本质原因是浏览器错误的将攻击者提供的用户输入数据当做JavaScript脚本给执行了。
XSS有几种不同的分类：
a.按照恶意输入的脚本是否在应用中储存，XSS被划分为“存储型XSS”和“反射型XSS”
b.按照是否和服务器交互，又可以划分为“Server Side XSS”和“DOM based XSS”
XSS的攻击者可以利用XSS的漏洞来窃取包括用户身份信息在内的各种敏感信息，修改web页面以欺骗用户，甚至控制用户的浏览器等。

如何防御XSS
防御XSS的最佳做法就是对数据进行严格的输出编码，使得攻击者提供的数据不再被浏览器认为是脚本而被误执行。例如<script>在进行HTML编码后变成&lt;script&gt;
这段数据就会被浏览器认为是一段普通的字符串，而不会当做脚本执行了。
编码需要根据输出数据所在的上下文来进行相应的编码，除了HTML编码，还有URL编码，JavaScript编码，CSS编码，JSON编码等。
其它的防御措施还有诸如设置CSP HTTP Header，输入验证，开启浏览器XSS防御等，但这些都存在被绕过的可能，并不能完全保证防御XSS攻击。

二、iframe的风险
我们经常会使用iframe来实现第三方的广告、插件、页面等，因为iframe的内容是由第三方提供的，默认情况下不受我们的控制，他们可以在iframe中运行JavaScript脚本
flash插件、弹出对话框等。如果iframe中的域名因为过期而被恶意攻击者抢注，或者第三方被黑客攻击，iframe中的内容被替换掉了，从而利用用户浏览器中的安全漏洞下
载安装木马、恶意勒索软件等等，就会导致比较严重的问题。
好在HTML5中，iframe有了一个sandbox的安全属性，通过它可以对iframe的行为进行各种限制。使用sandbox最简单的方式是在iframe元素中添加这个属性就好：
<iframe sandbox src=""></iframe>
如果像这样只是添加了sandbox属性而保持属性值为空的话，那么浏览器会对iframe实施最严格的调控限制，基本上就是除了静态资源外，其它什么都做不了，比如不准提交
表单、不准弹窗、不准执行脚本等等，连Origin都会被强制重新分配一个唯一的值，也就是说iframe中的页面访问它自己的服务器都会被算作跨域请求。
sandbox一些比较常用的参数配置如下：
1. allow-forms: 允许iframe提交form表单
2. allow-popops: 允许iframe弹出新的窗口或者标签页
3. allow-script: 允许iframe中执行JavaScript脚本
4. allow-same-origin: 允许iframe中的网页开启同源策略

三、点击劫持
我们自己的页面也可能被不法分子放到他们精心构造的iframe中，进行点击劫持攻击，通常的步骤是这样的：
1.攻击者精心构造一个诱导用户点击的内容，比如web页面小游戏
2.将我们的页面放入到iframe中
3.利用z-index等CSS样式将这个iframe叠加到小游戏的正上方
4.把iframe设置为100%透明度
5.用户访问这个页面后，看到的是一个web小游戏，如果点击了这个游戏，实际上点的是iframe中的页面
防御点击劫持的办法是，使用 X-Frame-Origin:DENY这个HTTP Header来明确的告诉浏览器，不要把当前HTTP响应的内容在iframe中显示。

四、错误的内容推断
假设有这样一个场景：某个网站运行用户在评论里面上传图片，攻击者在上传图片的时候，看似提交的是个图片文件，实则是含有JavaScript的脚本文件。该文件逃过了
文件类型校验，并在服务器存储了下来。接着，用户在访问这个评论的时候，浏览器会去请求这个伪装成图片的JavaScript脚本，而如果此时浏览器错误的推断了这个响应
的内容类型(MIME types)，那么就会把这个图片文件当做JavaScript脚本执行，产生了攻击行为。
问题的关键在于，后端服务器在返回的响应中设置的Content-Type Header仅仅只是给浏览器提供当前响应内容类型的建议，而浏览器完全可能根据响应中的实际内容去
推断内容的类型。上面的例子，后端通过Content-Type Header建议浏览器按照图片来渲染这次的HTTP响应，但是浏览器发现响应中其实是JavaScript，于是自己就把这段
响应当做JS脚本来执行，安全问题也就产生了。
防御这种问题的办法就是通过设置X-Content-Type-Option这个HTTP Header明确禁止浏览器去推断响应的类型，完全按照服务器建议的类型去执行响应内容。

五、不安全的第三方依赖包
主要指的是第三方库的安全漏洞问题，比如jQuery issue2432，就存在XSS攻击的可能性。

六、HTTPS的问题
如果浏览器发出去的第一次请求就被攻击者拦截了下来并做了修改，根本不给浏览器和服务器进行HTTPS通信的机会。大致过程如下：
用户在浏览器输入URL的时候往往不是从https://开始的，而是直接从域名开始输入，随后浏览器向服务器发起HTTP通信，然而由于攻击者的存在，他把服务端返回的跳转
到HTTPS的响应拦截了，并且代替客户端和服务器端进行后续的通信。
解决这个安全问题的办法是使用HSTS(HTTP Strict Transport Security)，它通过HTTP Header以及一个预加载的清单，来告知浏览器在和网站进行通信的时候强制性
的使用HTTPS，而不是通过明文的HTTP进行通信。强制性指的是无论在何种情况下都直接向服务器发起HTTPS请求。

七、本地存储数据泄露
















